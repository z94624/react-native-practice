"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImplementationSync = exports.getImplementation = exports.findSentinelSync = exports.findSentinel = exports.findPackagesSync = exports.findPackages = exports.WORKSPACE_ROOT_SENTINELS = exports.YARN_LOCK = exports.RUSH_JSON = exports.PNPM_WORKSPACE_YAML = exports.PACKAGE_LOCK_JSON = exports.LERNA_JSON = void 0;
const fast_glob_1 = __importDefault(require("fast-glob"));
const find_up_1 = __importDefault(require("find-up"));
const path = __importStar(require("path"));
exports.LERNA_JSON = "lerna.json";
exports.PACKAGE_LOCK_JSON = "package-lock.json";
exports.PNPM_WORKSPACE_YAML = "pnpm-workspace.yaml";
exports.RUSH_JSON = "rush.json";
exports.YARN_LOCK = "yarn.lock";
exports.WORKSPACE_ROOT_SENTINELS = [
    exports.LERNA_JSON,
    exports.RUSH_JSON,
    exports.YARN_LOCK,
    exports.PACKAGE_LOCK_JSON,
    exports.PNPM_WORKSPACE_YAML,
];
function makeFindSentinel(finder) {
    let result;
    return () => {
        if (process.env.JEST_WORKER_ID || !result) {
            result = finder(exports.WORKSPACE_ROOT_SENTINELS);
        }
        return result;
    };
}
function makeFindPackages(glob, fallback) {
    const ignore = ["**/Pods/**", "**/bower_components/**", "**/node_modules/**"];
    return (patterns, cwd) => {
        if (!Array.isArray(patterns)) {
            return fallback;
        }
        return glob(patterns, {
            cwd,
            ignore,
            absolute: true,
            onlyDirectories: true,
        });
    };
}
exports.findPackages = makeFindPackages(fast_glob_1.default, Promise.resolve([]));
exports.findPackagesSync = makeFindPackages(fast_glob_1.default.sync, []);
exports.findSentinel = makeFindSentinel(find_up_1.default);
exports.findSentinelSync = makeFindSentinel(find_up_1.default.sync);
function getImplementation(sentinel) {
    switch (path.basename(sentinel)) {
        case exports.PACKAGE_LOCK_JSON: // fallthrough - logic defining workspaces config is the same for npm and yarn
        case exports.YARN_LOCK:
            return Promise.resolve().then(() => __importStar(require("./yarn")));
        case exports.LERNA_JSON:
            return Promise.resolve().then(() => __importStar(require("./lerna")));
        case exports.PNPM_WORKSPACE_YAML:
            return Promise.resolve().then(() => __importStar(require("./pnpm")));
        case exports.RUSH_JSON:
            return Promise.resolve().then(() => __importStar(require("./rush")));
    }
    throw new Error(`This should not happen - did we forget to add a switch case for '${sentinel}'?`);
}
exports.getImplementation = getImplementation;
function getImplementationSync(sentinel) {
    switch (path.basename(sentinel)) {
        case exports.PACKAGE_LOCK_JSON: // fallthrough
        case exports.YARN_LOCK:
            return require("./yarn");
        case exports.LERNA_JSON:
            return require("./lerna");
        case exports.PNPM_WORKSPACE_YAML:
            return require("./pnpm");
        case exports.RUSH_JSON:
            return require("./rush");
    }
    throw new Error(`This should not happen - did we forget to add a switch case for '${sentinel}'?`);
}
exports.getImplementationSync = getImplementationSync;
//# sourceMappingURL=common.js.map