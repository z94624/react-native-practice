"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findWorkspacePackagesSync = exports.findWorkspacePackages = void 0;
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path = __importStar(require("path"));
const common_1 = require("./common");
function filterSentinels() {
    return common_1.WORKSPACE_ROOT_SENTINELS.filter((sentinel) => sentinel !== common_1.LERNA_JSON);
}
// https://lerna.js.org/docs/configuration
function findWorkspacePackages(configFile) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = yield (0, promises_1.readFile)(configFile, { encoding: "utf-8" });
        const { packages, useWorkspaces } = JSON.parse(config);
        if (!useWorkspaces) {
            return yield (0, common_1.findPackages)(packages, path.dirname(configFile));
        }
        const root = path.dirname(configFile);
        const sentinels = filterSentinels();
        for (const sentinel of sentinels) {
            const filename = path.join(root, sentinel);
            if ((0, fs_1.existsSync)(filename)) {
                const { findWorkspacePackages } = yield (0, common_1.getImplementation)(filename);
                return yield findWorkspacePackages(filename);
            }
        }
        return [];
    });
}
exports.findWorkspacePackages = findWorkspacePackages;
function findWorkspacePackagesSync(configFile) {
    const config = (0, fs_1.readFileSync)(configFile, { encoding: "utf-8" });
    const { packages, useWorkspaces } = JSON.parse(config);
    if (!useWorkspaces) {
        return (0, common_1.findPackagesSync)(packages, path.dirname(configFile));
    }
    const root = path.dirname(configFile);
    const sentinels = filterSentinels();
    for (const sentinel of sentinels) {
        const filename = path.join(root, sentinel);
        if ((0, fs_1.existsSync)(filename)) {
            const { findWorkspacePackagesSync } = (0, common_1.getImplementationSync)(filename);
            return findWorkspacePackagesSync(filename);
        }
    }
    return [];
}
exports.findWorkspacePackagesSync = findWorkspacePackagesSync;
//# sourceMappingURL=lerna.js.map