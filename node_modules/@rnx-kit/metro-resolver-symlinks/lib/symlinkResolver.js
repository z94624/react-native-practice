"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeResolver = void 0;
const tools_node_1 = require("@rnx-kit/tools-node");
const resolver_1 = require("./resolver");
const remapImportPath_1 = require("./utils/remapImportPath");
function makeResolver({ remapModule = (_, moduleName, __) => moduleName, } = {}) {
    const metroResolver = (0, resolver_1.getMetroResolver)();
    const remappers = [remapModule, resolver_1.remapReactNativeModule, resolver_1.resolveModulePath];
    const symlinkResolver = (context, moduleName, platform, requestedModuleName) => {
        let resolve = metroResolver;
        const resolveRequest = context.resolveRequest;
        if (resolveRequest === symlinkResolver) {
            delete context.resolveRequest;
            // Metro enters a different code path than it should when `resolveRequest`
            // is set and the target package uses the `browser` field to redirect
            // modules. If detected, we need to unset `resolveRequest` and retry with
            // Metro's resolver to avoid interference.
            //
            // Ref: https://github.com/facebook/metro/blob/v0.67.0/packages/metro-resolver/src/resolve.js#L59
            if (typeof requestedModuleName === "string" &&
                requestedModuleName !== moduleName) {
                try {
                    return resolve(context, requestedModuleName, platform, null);
                }
                finally {
                    context.resolveRequest = resolveRequest;
                }
            }
        }
        else if (resolveRequest) {
            resolve = resolveRequest;
        }
        try {
            // If a module was excluded, `_getEmptyModule()` will be called with no
            // platform set. We should let Metro handle this without interfering. See
            // https://github.com/facebook/metro/blob/v0.71.0/packages/metro/src/node-haste/DependencyGraph/ModuleResolution.js#L97
            if (!platform) {
                return resolve(context, moduleName, platform, null);
            }
            const modifiedModuleName = remappers.reduce((modifiedName, remap) => remap(context, modifiedName, platform), moduleName);
            return resolve(context, (0, tools_node_1.normalizePath)(modifiedModuleName), platform, null);
        }
        finally {
            if (!context.resolveRequest) {
                // Restoring `resolveRequest` must happen last
                context.resolveRequest = resolveRequest;
            }
        }
    };
    return symlinkResolver;
}
exports.makeResolver = makeResolver;
makeResolver.remapImportPath = remapImportPath_1.remapImportPath;
//# sourceMappingURL=symlinkResolver.js.map