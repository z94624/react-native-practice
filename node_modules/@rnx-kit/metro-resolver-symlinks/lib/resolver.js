"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveModulePath = exports.remapReactNativeModule = exports.getMetroResolver = void 0;
const tools_node_1 = require("@rnx-kit/tools-node");
const tools_react_native_1 = require("@rnx-kit/tools-react-native");
const path = __importStar(require("path"));
function resolveFrom(moduleName, startDir) {
    return (0, tools_node_1.findPackageDependencyDir)(moduleName, {
        startDir,
        resolveSymlinks: true,
    });
}
function ensureResolveFrom(moduleName, startDir) {
    const p = resolveFrom(moduleName, startDir);
    if (!p) {
        throw new Error(`Cannot find module '${moduleName}'`);
    }
    return p;
}
/**
 * Get `metro-resolver` from the cli to avoid adding another dependency that
 * needs to be kept in sync.
 */
function getMetroResolver(fromDir = process.cwd()) {
    try {
        const rnPath = ensureResolveFrom("react-native", fromDir);
        const rncliPath = ensureResolveFrom("@react-native-community/cli", rnPath);
        const { dependencies = {} } = (0, tools_node_1.readPackage)(rncliPath);
        const metroResolverSearchPath = "@react-native-community/cli-plugin-metro" in dependencies
            ? ensureResolveFrom("@react-native-community/cli-plugin-metro", rncliPath)
            : rncliPath;
        const metroResolverPath = ensureResolveFrom("metro-resolver", metroResolverSearchPath);
        return require(metroResolverPath).resolve;
    }
    catch (_) {
        throw new Error("Cannot find module 'metro-resolver'. This probably means that '@rnx-kit/metro-resolver-symlinks' is not compatible with the version of 'metro' that you are currently using. Please update to the latest version and try again. If the issue still persists after the update, please file a bug at https://github.com/microsoft/rnx-kit/issues.");
    }
}
exports.getMetroResolver = getMetroResolver;
const remapReactNativeModule = (_context, moduleName, platform) => {
    const platformImpl = (0, tools_react_native_1.getAvailablePlatforms)()[platform];
    if (platformImpl) {
        if (moduleName === "react-native") {
            return platformImpl;
        }
        else if (moduleName.startsWith("react-native/")) {
            return `${platformImpl}/${moduleName.slice("react-native/".length)}`;
        }
    }
    return moduleName;
};
exports.remapReactNativeModule = remapReactNativeModule;
const resolveModulePath = ({ originModulePath }, moduleName, _platform) => {
    // Performance: Assume relative links are not going to hit symlinks
    const ref = (0, tools_node_1.parseModuleRef)(moduleName);
    if ((0, tools_node_1.isFileModuleRef)(ref)) {
        return moduleName;
    }
    const pkgName = ref.scope ? `${ref.scope}/${ref.name}` : ref.name;
    const pkgRoot = resolveFrom(pkgName, originModulePath);
    if (!pkgRoot) {
        return moduleName;
    }
    const replaced = moduleName.replace(pkgName, pkgRoot);
    const relativePath = path.relative(path.dirname(originModulePath), replaced);
    return relativePath.startsWith(".")
        ? relativePath
        : `.${path.sep}${relativePath}`;
};
exports.resolveModulePath = resolveModulePath;
//# sourceMappingURL=resolver.js.map