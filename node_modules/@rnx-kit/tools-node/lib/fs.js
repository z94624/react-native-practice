"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFile = exports.isDirectory = exports.statSync = exports.createDirectory = exports.findFirstFileExists = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
/**
 * Combine the root directory with each relative file, testing whether or not the file exists.
 * Stop and return as soon as a file is found.
 *
 * @param rootDir Root directory for each file.
 * @param relativeFiles Relative path of each file. `falsey` entries are ignored.
 * @returns Absolute path of the first file that exists, or `undefined`.
 */
function findFirstFileExists(rootDir, ...relativeFiles) {
    const normalizedRootDir = path_1.default.normalize(rootDir);
    for (const f of relativeFiles) {
        if (f) {
            const p = path_1.default.join(normalizedRootDir, path_1.default.normalize(f));
            if (fs_1.default.existsSync(p)) {
                return p;
            }
        }
    }
    return undefined;
}
exports.findFirstFileExists = findFirstFileExists;
/**
 * Create a directory, and all missing parent directories.
 *
 * @param p Directory to create
 */
function createDirectory(p) {
    fs_1.default.mkdirSync(p, { recursive: true, mode: 0o755 });
}
exports.createDirectory = createDirectory;
/**
 * Get stats (detailed information) for the target path.
 *
 * @param p Target path
 * @returns Stats data, or `undefined` if stats aren't available.
 */
function statSync(p) {
    try {
        return fs_1.default.statSync(p);
    }
    catch (_) {
        return undefined;
    }
}
exports.statSync = statSync;
/**
 * Determine if the target path refers to a directory.
 *
 * @param p Target path
 * @returns Returns `true` if the path refers to a directory, or `false` if it doesn't.
 */
function isDirectory(p) {
    var _a, _b;
    return (_b = (_a = statSync(p)) === null || _a === void 0 ? void 0 : _a.isDirectory()) !== null && _b !== void 0 ? _b : false;
}
exports.isDirectory = isDirectory;
/**
 * Determine if the target path refers to a file.
 *
 * @param p Target path
 * @returns Returns `true` if the path refers to a file, or `false` if it doesn't.
 */
function isFile(p) {
    var _a, _b;
    return (_b = (_a = statSync(p)) === null || _a === void 0 ? void 0 : _a.isFile()) !== null && _b !== void 0 ? _b : false;
}
exports.isFile = isFile;
//# sourceMappingURL=fs.js.map